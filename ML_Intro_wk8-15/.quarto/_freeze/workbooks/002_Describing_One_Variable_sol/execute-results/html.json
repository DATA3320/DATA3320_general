{
  "hash": "4583e11627e2e7a0c3312d7911ba4aec",
  "result": {
    "markdown": "\n\n# Stats Basics - Describing One Variable\n\nThe first step on our statistical journey is to look at how we can describe one variable at a time. \n\nThere are a few things that we can focus on here:\n<ul>\n<li> Loading data into Python. \n<li> Manipulating data structures containing data. \n<li> Basic statistics describing data. \n<li> Distributions and visualizations. \n</ul>\n\nIn short, we want to be able to load in a dataset, manipulate it to get what we care about, and look at the data (starting with one variable) to see what it says. This is a near universal starting point for doing machine learning, it all starts with the data, so gaining some understanding of that data will help us out. \n\n## Storing Data - Dataframes\n\nWe'll load the Titanic data from last time into a dataframe again. Dataframes are one of our most commonly used data structures (thing that stores a bunch of data in an organized way). We can think of a dataframe as a well formatted spreadsheet:\n<ul>\n<li> Each column represents one feature (variable) that is part of our data. \n<li> Each row represents one instance (example) of whatever we're looking at. \n<li> Each cell is one value. \n</ul>\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2256}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Slicing Dataframes\n\nWe can select different parts of a dataframe at a time. Most commonly, we want to get one or more of the columns. We can use the column names to get what we want. There are multiple ways to do this, but we will almost always settle on the last one. \n\nSuppose we want the column of \"Survived\" - 0 for Leo, 1 for Kate.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=2257}\n```\n0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=2258}\n```\n0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=2259}\n```\n0      0\n1      1\n2      1\n3      1\n4      0\n      ..\n886    0\n887    1\n888    0\n889    1\n890    0\nName: Survived, Length: 891, dtype: int64\n```\n:::\n:::\n\n\n#### Exercise\n\nChallenge - print multiple columns. Such as Survived and Age! \n\nYou may need to Google, think about what to Google and try to implement what you find. Try to Speculate why the formatting might be a little different here than for one variable. \n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=2260}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>26.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>0</td>\n      <td>27.0</td>\n    </tr>\n    <tr>\n      <th>887</th>\n      <td>1</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>889</th>\n      <td>1</td>\n      <td>26.0</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>0</td>\n      <td>32.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>891 rows Ã— 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Slicing by Rows\n\nWe can also select rows from a dataframe. This is generally less important for most of the things that we do. We can select the specific rows we want, or give a condition to filter by. This is effectively the same as using the filter feature in Excel. \n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=2261}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>26.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>35.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=2262}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Moran, Mr. James</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330877</td>\n      <td>8.4583</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>0</td>\n      <td>1</td>\n      <td>McCarthy, Mr. Timothy J</td>\n      <td>male</td>\n      <td>54.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17463</td>\n      <td>51.8625</td>\n      <td>E46</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Palsson, Master. Gosta Leonard</td>\n      <td>male</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>349909</td>\n      <td>21.0750</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>884</th>\n      <td>885</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Sutehall, Mr. Henry Jr</td>\n      <td>male</td>\n      <td>25.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>SOTON/OQ 392076</td>\n      <td>7.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>885</th>\n      <td>886</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Rice, Mrs. William (Margaret Norton)</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>382652</td>\n      <td>29.1250</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>886</th>\n      <td>887</td>\n      <td>0</td>\n      <td>2</td>\n      <td>Montvila, Rev. Juozas</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>211536</td>\n      <td>13.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>888</th>\n      <td>889</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>2</td>\n      <td>W./C. 6607</td>\n      <td>23.4500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>890</th>\n      <td>891</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Dooley, Mr. Patrick</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>370376</td>\n      <td>7.7500</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n<p>549 rows Ã— 12 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis can be used to select only the portion of data that we want in a given scenario. For example, if we only wanted Titanic survivors that are in the 18 to 34 age range (pretend we are trying to sell TV ads), we can select that. \n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=2263}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>135.000000</td>\n      <td>135.0</td>\n      <td>135.000000</td>\n      <td>135.000000</td>\n      <td>135.000000</td>\n      <td>135.000000</td>\n      <td>135.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>448.637037</td>\n      <td>1.0</td>\n      <td>2.037037</td>\n      <td>26.048148</td>\n      <td>0.385185</td>\n      <td>0.400000</td>\n      <td>41.502840</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>250.067502</td>\n      <td>0.0</td>\n      <td>0.832255</td>\n      <td>4.772384</td>\n      <td>0.690935</td>\n      <td>0.764902</td>\n      <td>54.572639</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.000000</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>18.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>257.000000</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>9.670850</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>431.000000</td>\n      <td>1.0</td>\n      <td>2.000000</td>\n      <td>26.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>21.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>651.000000</td>\n      <td>1.0</td>\n      <td>3.000000</td>\n      <td>30.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>55.220850</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>890.000000</td>\n      <td>1.0</td>\n      <td>3.000000</td>\n      <td>34.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>263.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Types of Data\n\nWe have several different types of data that we may need to deal with. The most important split is the difference between categorical data and numerical data. This is one thing that we need to be very comfortable with:\n<ul>\n<li> Numerical Data - typically a measurement, reading, or value that is numerical. E.g. Net worth, age, temperature, belt size, etc...\n    <ul>\n    <li> Rule of thumb - if you can plot a value on a number line and \"do math\" to it - e.g. compare greater/lesser, add, divide - then it is probably numerical. \n    </ul>\n<li> Categorical Data - typically a label, descriptor, or group indicator. E.g. hair color, land zoning, car make, type of tree, etc...\n    <ul>\n    <li> Rule of thumb - if you would \"group by\" a value, it is normally categorical. \n    </ul>\n</ul>\n\nUsually determining which data type our data falls into is relatively easy, but there are some scenarios where it isn't. Most notably, numbers are often used to denote group types, so they sometimes act as categorical values. For example, if we were to group people by their nationality and label those groups 1, 2, 3, etc... that is a use of a numerical variable as a categorical value. We will need to do things like this later on. \n\n#### Python Data Types\n\nEvery programming language has a few built in data types that it naturally supports. Some important and common ones are:\n<ul>\n<li> String - text. \n<li> Integer - number without decimals. \n<li> Float - number with decimals. \n<li> Bool - true/false.\n</ul>\n\nThe \"type()\" function will show the type of any object. \n\n<b>Note:</b> Python is what we called a weakly typed language, which basically means that an individual varaible can take on any type of value (this is in comparison to a strongly typed language, where if you create an integer varaible, it can only be an integer). This has the advantage of making things easy to do, as there's no restrictions on what you can do with a variable; however, it can also lead to confusion as it makes it easier to make an error such as putting a text value in a varaible when you are expecting a number. Using clear variable names is the most simple way to protect against this. \n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'str'>\n<class 'int'>\n<class 'float'>\n<class 'bool'>\n```\n:::\n:::\n\n\n## Counts of Categorical Variables\n\nWhen dealing with categorical variables the most important thing that we can know is how many times each value occurs. \n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=2265}\n```\n3    491\n1    216\n2    184\nName: Pclass, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=2266}\n```\n0\n```\n:::\n:::\n\n\n#### Countplots\n\nWe can also use a very simple visualization to see the counts broken down. Each tab holds the same countplot, the difference in the second one is that we added an argument for \"hue\", which is a common argument in seaborn graphs that separates the data by whatever you put there. Here we gave it the \"Survived\" variable, so each of the bars is split into survived/died subsets. \n\n::: {.panel-tabset group=\"python\"}\n\n## Countplot\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=2267}\n```\n<AxesSubplot:xlabel='Pclass', ylabel='count'>\n```\n\nA countplot\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-14-output-2.png){width=593 height=422}\n:::\n:::\n\n\n## Countplot - Split\n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=2268}\n```\n<AxesSubplot:xlabel='Pclass', ylabel='count'>\n```\n\nA countplot\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-15-output-2.png){width=593 height=422}\n:::\n:::\n\n\n:::\n\n## Distribution of Numerical Variables\n\nProbably the most critical thing we can know about a numerical variable is its distribution - or how many times different values occur. \n\nWe can also get these statistics individually. This time I added print statements, this just makes the program print more than one output, if all the print statements are left our we'd only get the last one. \n\nThis is one place where we can easily see multiple ways to do things, which is very common in programming. Specifically, we have several sets of functions that do basic math. Here we have an example of probably the two most common ones:\n<ul>\n<li> Pandas - the library that provides dataframes for us. \n<li> Numpy - this library has a bunch of useful math-y stuff. \n</ul>\nNote the difference in how the code is structured for each one, this is due to <b><i>where</i></b> these functions come from. The pandas ones are called by stating DATFRAME.FUNCTION() - this is because the functions \"are part of\" pandas, so we can tell it to basically \"find the mean function for this object (the df)\" and the program will look inside of Pandas for that thing. This works because the dataframe has its own mean/std/count function built into it. The numpy ones are more generic, and we call them by saying LIBRARY.FUNCTION(DATA). This is because these are not part of the dataframe, we are calling a generic function and feeding it our data. We don't need a dataframe to use this, we can feed it (almost) any data - lists, arrays, series, etc... since it is not part of an object. This basic split is something that is pretty universal in most programming languages, it feels arbitrary at first but it does become natural over time. \n\n<b>Note:</b> the median below and the 50% above are the same. The median is the value \"in the middle\" - half of the values are higher, half lower. \n\n#### Examples of Basic Stats Functions. \n\n::: {.panel-tabset group=\"python\"}\n\n## Describe\n\n::: {.cell execution_count=15}\n\n::: {.cell-output .cell-output-display execution_count=2269}\n```\ncount    891.000000\nmean      32.204208\nstd       49.693429\nmin        0.000000\n25%        7.910400\n50%       14.454200\n75%       31.000000\nmax      512.329200\nName: Fare, dtype: float64\n```\n:::\n:::\n\n\n## Pandas\n\n::: {.cell execution_count=16}\n\n::: {.cell-output .cell-output-stdout}\n```\nMean:  32.2042079685746\nMedian:  14.4542\nMin:  0.0\nMax:  512.3292\nCount:  891\nVariance:  2469.436845743117\nStd. Dev:  49.693428597180905\n```\n:::\n:::\n\n\n## Numpy\n\n::: {.cell execution_count=17}\n\n::: {.cell-output .cell-output-stdout}\n```\nMean:  32.2042079685746\nMedian:  14.4542\nMin:  0.0\nMax:  512.3292\nVariance:  2466.6653116850434\nStd. Dev:  49.66553444477411\n```\n:::\n:::\n\n\n::: \n\n## Distributions\n\nWhen looking at a variable, calculating things like the mean or median is useful, but very incomplete. We probably want to know more about the values and how frequently they occur - something called the distribution. \n\nDistributions are one of the fundamental concepts of statistics, one that well use constantly. We'll dig into them a bunch more over the next few sessions. \n\n### Types of Distributions\n\nDistributions commonly follow patterns, and we can use these paterns to help us build an understanding of our own data. \n\nWe will look more at specific distributions in more detail soon, for now, we can think of distributions as describing the shape of the data, or how it is distributed over the range. \n\n#### Histograms\n\nThe histogram is the most common tool used to examine a distribution. A histogram is a specialized type of bar chart that is always structured in the same way:\n<ul>\n<li> The X axis is the variable we are looking at. \n<li> The Y axis is a count of how many times that value occurs. \n</ul>\n\nHistograms will be one of our most frequently used visualizations - luckily they are pretty simple. \n\n#### Seaborn and Graphing\n\nThere are many, many packages that allow us to draw charts and visualizations in Python. The main one we'll focus on is called Seaborn. Seaborn is a package of graphing and charting tools that makes it relatively easy to make pretty charts. \n\nSeaborn is not the only choice, but it is common, pretty, and easy, so we'll stick with it for the most part. \n\nThere are several types of graphs that we can look at to picture the distribution of our data. \n\n::: {.panel-tabset group=\"python\"}\n\n## Histogram\n\n::: {.cell execution_count=18}\n\n::: {.cell-output .cell-output-display execution_count=2272}\n```\n<AxesSubplot:xlabel='Age', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-19-output-2.png){width=593 height=422}\n:::\n:::\n\n\n## PDF\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=2273}\n```\n<AxesSubplot:xlabel='Age', ylabel='Density'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-20-output-2.png){width=606 height=422}\n:::\n:::\n\n\n## CDF\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display execution_count=2274}\n```\n<AxesSubplot:xlabel='Age', ylabel='Density'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-21-output-2.png){width=589 height=422}\n:::\n:::\n\n\n## Hist w/ PDF\n\n::: {.cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=2275}\n```\n<AxesSubplot:xlabel='Age', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-22-output-2.png){width=593 height=422}\n:::\n:::\n\n\n::: \n\n### Seaborn, Matplotlib, and Graphing\n\nWe can do something similar with the underlying functionality of Seaborn - matplotlib and pyplot. Matplotlib is the \"granddaddy\" of graphing in Python, and the entire Seaborn package is built on top of it. The mpl stuff is generally less fancy looking and more confusing to use, but we do need to be at least a bit aware of it.\n\nWhy is this important?\n<ul>\n<li> Sometimes we need the \"original\" matplotlib stuff to do things, even when making Seaborn charts. \n<li> If we are looking for examples/explainations online, there is a high probability that we see some mpl stuff in that code. \n<li> One of the key things that makes programming a usefull thing is the ability to have functionality that is modular and can be extended (build better things on top of existing code). This is one of the first places where we start to deal with that. In the example below, we should be able to see that code for a histogram, read it, understand the goal, and replace it with a Seaborn histogram shoudl we desire. \n</ul>\n\n::: {.cell execution_count=22}\n\n::: {.cell-output .cell-output-display execution_count=2276}\n```\n<AxesSubplot:ylabel='Frequency'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-23-output-2.png){width=593 height=404}\n:::\n:::\n\n\n## Outliers\n\nOutliers are values that are \"far outside the norm\", or basically values that fall to the extreme left of extreme right of our distribution. \n\n### Dealing with Outliers\n\nDealing with outliers is always a matter of judgement - sometimes an outlier is real and relevant, so we want to keep it in; sometimes an outlier is an error or misleading, so we want to remove it. \n\nAs a rule of thumb, we can think of what to do outliers like this:\n<ul>\n<li> If the outlier is going to help inform our model, and will help create more accurate predictions, we want to leave it in. \n<li> If the outlier is going to skew our results, and will make predictions less accurate, we want to remove it. \n</ul>\nIn practice, most outliers are filtered out. Knowing that Elon Musk has 300 billion dollars will rarely be helpful in building a model to predict the net worth of people. Usually this is the case, outliers are very rare, and don't really help in predicting a \"normal\" value. \n\nWe have ways to automatically (-ish) remove outliers that we'll look at later on in the course. The most simple way to remove outliers is to just create a filter that removes every value that is greater or less than a cutoff. Our histograms can often give us a good idea of what that cutoff should be as we can see it visually on the graph. \n\n::: {.cell execution_count=23}\n\n::: {.cell-output .cell-output-display execution_count=2277}\n```\n<AxesSubplot:xlabel='Fare', ylabel='Count'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](002_Describing_One_Variable_sol_files/figure-html/cell-24-output-2.png){width=593 height=422}\n:::\n:::\n\n\n## Where Are We Now?\n\nAt this point, we are hopefully becoming moderately comfortable with:\n<ul>\n<li> Opening, running, and editing notebook files. \n<li> Loading data into a dataframe and starting to manipulate it. \n<li> Starting to use calculations and visualizations to describe data. \n</ul>\n\n",
    "supporting": [
      "002_Describing_One_Variable_sol_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}